/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_TEST_FSM_H
#define _MOCK_TEST_FSM_H

#include "unity.h"
#include "test_fsm.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_test_fsm_Init(void);
void mock_test_fsm_Destroy(void);
void mock_test_fsm_Verify(void);




#define is_true_IgnoreAndReturn(cmock_retval) is_true_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void is_true_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define is_true_StopIgnore() is_true_CMockStopIgnore()
void is_true_CMockStopIgnore(void);
#define is_true_ExpectAnyArgsAndReturn(cmock_retval) is_true_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void is_true_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define is_true_ExpectAndReturn(f, cmock_retval) is_true_CMockExpectAndReturn(__LINE__, f, cmock_retval)
void is_true_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fsm_t* f, _Bool cmock_to_return);
typedef _Bool (* CMOCK_is_true_CALLBACK)(fsm_t* f, int cmock_num_calls);
void is_true_AddCallback(CMOCK_is_true_CALLBACK Callback);
void is_true_Stub(CMOCK_is_true_CALLBACK Callback);
#define is_true_StubWithCallback is_true_Stub
#define is_true_ReturnThruPtr_f(f) is_true_CMockReturnMemThruPtr_f(__LINE__, f, sizeof(fsm_t))
#define is_true_ReturnArrayThruPtr_f(f, cmock_len) is_true_CMockReturnMemThruPtr_f(__LINE__, f, cmock_len * sizeof(*f))
#define is_true_ReturnMemThruPtr_f(f, cmock_size) is_true_CMockReturnMemThruPtr_f(__LINE__, f, cmock_size)
void is_true_CMockReturnMemThruPtr_f(UNITY_LINE_TYPE cmock_line, fsm_t* f, size_t cmock_size);
#define is_true_IgnoreArg_f() is_true_CMockIgnoreArg_f(__LINE__)
void is_true_CMockIgnoreArg_f(UNITY_LINE_TYPE cmock_line);
#define do_nothing_Ignore() do_nothing_CMockIgnore()
void do_nothing_CMockIgnore(void);
#define do_nothing_StopIgnore() do_nothing_CMockStopIgnore()
void do_nothing_CMockStopIgnore(void);
#define do_nothing_ExpectAnyArgs() do_nothing_CMockExpectAnyArgs(__LINE__)
void do_nothing_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define do_nothing_Expect(f) do_nothing_CMockExpect(__LINE__, f)
void do_nothing_CMockExpect(UNITY_LINE_TYPE cmock_line, fsm_t* f);
typedef void (* CMOCK_do_nothing_CALLBACK)(fsm_t* f, int cmock_num_calls);
void do_nothing_AddCallback(CMOCK_do_nothing_CALLBACK Callback);
void do_nothing_Stub(CMOCK_do_nothing_CALLBACK Callback);
#define do_nothing_StubWithCallback do_nothing_Stub
#define do_nothing_ReturnThruPtr_f(f) do_nothing_CMockReturnMemThruPtr_f(__LINE__, f, sizeof(fsm_t))
#define do_nothing_ReturnArrayThruPtr_f(f, cmock_len) do_nothing_CMockReturnMemThruPtr_f(__LINE__, f, cmock_len * sizeof(*f))
#define do_nothing_ReturnMemThruPtr_f(f, cmock_size) do_nothing_CMockReturnMemThruPtr_f(__LINE__, f, cmock_size)
void do_nothing_CMockReturnMemThruPtr_f(UNITY_LINE_TYPE cmock_line, fsm_t* f, size_t cmock_size);
#define do_nothing_IgnoreArg_f() do_nothing_CMockIgnoreArg_f(__LINE__)
void do_nothing_CMockIgnoreArg_f(UNITY_LINE_TYPE cmock_line);
#define fsm_malloc_IgnoreAndReturn(cmock_retval) fsm_malloc_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void fsm_malloc_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define fsm_malloc_StopIgnore() fsm_malloc_CMockStopIgnore()
void fsm_malloc_CMockStopIgnore(void);
#define fsm_malloc_ExpectAnyArgsAndReturn(cmock_retval) fsm_malloc_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void fsm_malloc_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define fsm_malloc_ExpectAndReturn(s, cmock_retval) fsm_malloc_CMockExpectAndReturn(__LINE__, s, cmock_retval)
void fsm_malloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t s, void* cmock_to_return);
typedef void* (* CMOCK_fsm_malloc_CALLBACK)(size_t s, int cmock_num_calls);
void fsm_malloc_AddCallback(CMOCK_fsm_malloc_CALLBACK Callback);
void fsm_malloc_Stub(CMOCK_fsm_malloc_CALLBACK Callback);
#define fsm_malloc_StubWithCallback fsm_malloc_Stub
#define fsm_malloc_IgnoreArg_s() fsm_malloc_CMockIgnoreArg_s(__LINE__)
void fsm_malloc_CMockIgnoreArg_s(UNITY_LINE_TYPE cmock_line);
#define fsm_free_Ignore() fsm_free_CMockIgnore()
void fsm_free_CMockIgnore(void);
#define fsm_free_StopIgnore() fsm_free_CMockStopIgnore()
void fsm_free_CMockStopIgnore(void);
#define fsm_free_ExpectAnyArgs() fsm_free_CMockExpectAnyArgs(__LINE__)
void fsm_free_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define fsm_free_Expect(cmock_arg1) fsm_free_CMockExpect(__LINE__, cmock_arg1)
void fsm_free_CMockExpect(UNITY_LINE_TYPE cmock_line, void* cmock_arg1);
typedef void (* CMOCK_fsm_free_CALLBACK)(void* cmock_arg1, int cmock_num_calls);
void fsm_free_AddCallback(CMOCK_fsm_free_CALLBACK Callback);
void fsm_free_Stub(CMOCK_fsm_free_CALLBACK Callback);
#define fsm_free_StubWithCallback fsm_free_Stub
#define fsm_free_ReturnThruPtr_cmock_arg1(cmock_arg1) fsm_free_CMockReturnMemThruPtr_cmock_arg1(__LINE__, cmock_arg1, sizeof(void))
#define fsm_free_ReturnArrayThruPtr_cmock_arg1(cmock_arg1, cmock_len) fsm_free_CMockReturnMemThruPtr_cmock_arg1(__LINE__, cmock_arg1, cmock_len * sizeof(*cmock_arg1))
#define fsm_free_ReturnMemThruPtr_cmock_arg1(cmock_arg1, cmock_size) fsm_free_CMockReturnMemThruPtr_cmock_arg1(__LINE__, cmock_arg1, cmock_size)
void fsm_free_CMockReturnMemThruPtr_cmock_arg1(UNITY_LINE_TYPE cmock_line, void* cmock_arg1, size_t cmock_size);
#define fsm_free_IgnoreArg_cmock_arg1() fsm_free_CMockIgnoreArg_cmock_arg1(__LINE__)
void fsm_free_CMockIgnoreArg_cmock_arg1(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
